//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var UserBook = newUserBookTable("mydb", "user_book", "")

type userBookTable struct {
	mysql.Table

	// Columns
	UserID mysql.ColumnInteger
	BookID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type UserBookTable struct {
	userBookTable

	NEW userBookTable
}

// AS creates new UserBookTable with assigned alias
func (a UserBookTable) AS(alias string) *UserBookTable {
	return newUserBookTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserBookTable with assigned schema name
func (a UserBookTable) FromSchema(schemaName string) *UserBookTable {
	return newUserBookTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserBookTable with assigned table prefix
func (a UserBookTable) WithPrefix(prefix string) *UserBookTable {
	return newUserBookTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserBookTable with assigned table suffix
func (a UserBookTable) WithSuffix(suffix string) *UserBookTable {
	return newUserBookTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserBookTable(schemaName, tableName, alias string) *UserBookTable {
	return &UserBookTable{
		userBookTable: newUserBookTableImpl(schemaName, tableName, alias),
		NEW:           newUserBookTableImpl("", "new", ""),
	}
}

func newUserBookTableImpl(schemaName, tableName, alias string) userBookTable {
	var (
		UserIDColumn   = mysql.IntegerColumn("user_id")
		BookIDColumn   = mysql.IntegerColumn("book_id")
		allColumns     = mysql.ColumnList{UserIDColumn, BookIDColumn}
		mutableColumns = mysql.ColumnList{}
		defaultColumns = mysql.ColumnList{}
	)

	return userBookTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID: UserIDColumn,
		BookID: BookIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
