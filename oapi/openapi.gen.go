// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/url"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// User defines model for User.
type User struct {
	Email *string `json:"email,omitempty"`
	Id    *int    `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	Uuid  *string `json:"uuid,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit Maximum number of users to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The starting index of the first user to return
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Name search by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Email search by email
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// CreateUserParams defines parameters for CreateUser.
type CreateUserParams struct {
	Name  *string `form:"name,omitempty" json:"name,omitempty"`
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// UpdateUserParams defines parameters for UpdateUser.
type UpdateUserParams struct {
	// Name The updated name of the user
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Email The updated email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all users with pagination
	// (GET /users)
	GetUsers(c *fiber.Ctx, params GetUsersParams) error
	// Create a user
	// (POST /users)
	CreateUser(c *fiber.Ctx, params CreateUserParams) error
	// Delete a specific user by ID
	// (DELETE /users/{uuid})
	DeleteUser(c *fiber.Ctx, uuid string) error
	// Get a specific user by ID
	// (GET /users/{uuid})
	GetUserById(c *fiber.Ctx, uuid string) error
	// Update a specific user by ID
	// (PATCH /users/{uuid})
	UpdateUser(c *fiber.Ctx, uuid string, params UpdateUserParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", query, &params.Email)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter email: %w", err).Error())
	}

	return siw.Handler.GetUsers(c, params)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateUserParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", query, &params.Email)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter email: %w", err).Error())
	}

	return siw.Handler.CreateUser(c, params)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", c.Params("uuid"), &uuid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter uuid: %w", err).Error())
	}

	return siw.Handler.DeleteUser(c, uuid)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", c.Params("uuid"), &uuid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter uuid: %w", err).Error())
	}

	return siw.Handler.GetUserById(c, uuid)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", c.Params("uuid"), &uuid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter uuid: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateUserParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", query, &params.Name)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter name: %w", err).Error())
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", query, &params.Email)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter email: %w", err).Error())
	}

	return siw.Handler.UpdateUser(c, uuid, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/users", wrapper.GetUsers)

	router.Post(options.BaseURL+"/users", wrapper.CreateUser)

	router.Delete(options.BaseURL+"/users/:uuid", wrapper.DeleteUser)

	router.Get(options.BaseURL+"/users/:uuid", wrapper.GetUserById)

	router.Patch(options.BaseURL+"/users/:uuid", wrapper.UpdateUser)

}
